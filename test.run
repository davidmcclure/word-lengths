#!/bin/bash
#
#all commands that start with SBATCH contain commands that are just used by SLURM for scheduling
#################
#set a job name
#SBATCH --job-name=avg-word-lengths
#################
#a file for job output, you can check job progress
#SBATCH --output=avg-word-lengths.out
#################
# a file for errors from the job
#SBATCH --error=avg-word-lengths.err
#################
#time you think you need; default is one hour
#in minutes in this case, hh:mm:ss
#SBATCH --time=00:10:00
#################
#quality of service; think of it as job priority
#SBATCH --qos=normal
#################
#number of nodes you are requesting
#SBATCH --nodes=1
#################
#memory per node; default is 4000 MB per CPU
#SBATCH --mem=16000
#you could use --mem-per-cpu; they mean what we are calling cores
#################
#tasks to run per node; a "task" is usually mapped to a MPI processes.
# for local parallelism (OpenMP or threads), use "--ntasks-per-node=1 --cpus-per-task=16" instead
#SBATCH --ntasks-per-node=1
#SBATCH --cpus-per-task=4
#################

module load python/3.4.3
module load jre/1.8.0_91

PYSPARK_PYTHON=/share/PI/malgeehe/code/word-lengths/env/bin/python

# Start the Spark master / slave.
MASTER=$(hostname)
srun /share/PI/malgeehe/spark/start-cluster $MASTER &

# Wait for cluster to start.
sleep 20

spark-submit \
  --conf spark.default.parallelism=16 \
  --driver-memory 4000m \
  --executor-memory 12000m \
  --master spark://$MASTER:7077 \
  ./bin/avg-word-lengths.py $@
